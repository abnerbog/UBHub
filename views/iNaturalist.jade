head
    style.
        .bar-chart {
            background-color: #C7D9D9;
        }
    script(async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAEKjvE48-VV37P2pGBWFphvlrx8BXGDCs&libraries=drawing")
    script.
        var data = !{data};
        console.log(data);
        window.onload = function (ev) {
            initMapOnPage();
        };

        function initMapOnPage() {
            center = {lat: 20, lng: 15};
            map = new google.maps.Map(document.getElementById('map'), {
                zoom: 2, streetViewControl: false,
                center: center,
                styles: [{"elementType": "geometry", "stylers": [{"color": "#b6d5e3"}]},
                    {"elementType": "labels.text.fill", "stylers": [{"color": "#6da4c7"}]},
                    {"elementType": "labels.text.stroke", "stylers": [{"color": "#b6d5e3"}]},
                    {"featureType": "administrative", "stylers": [{"visibility": "simplified"}]},
                    {"featureType": "administrative", "elementType": "geometry", "stylers": [{"color": "#f2f2f2"}]},
                    //country borders color is next line
                    {
                        "featureType": "administrative",
                        "elementType": "geometry.stroke",
                        "stylers": [{"color": "#ffffff"}, {"visibility": "on"}]
                    },
                    //main labels color is the next line
                    {
                        "featureType": "administrative",
                        "elementType": "labels.text",
                        "stylers": [{"color": "#939393"}]
                    },
                    //urban land color is next line
                    {"featureType": "landscape", "stylers": [{"color": "#cccccc"}]},
                    {
                        "featureType": "landscape.man_made",
                        "elementType": "geometry.stroke",
                        "stylers": [{"color": "#334e87"}]
                    },
                    //main land color is the next line
                    {"featureType": "landscape.natural", "stylers": [{"color": "#d3e9d5"}]},
                    {"featureType": "poi", "stylers": [{"visibility": "off"}]},
                    {"featureType": "poi", "elementType": "geometry", "stylers": [{"color": "#283d6a"}]},
                    {"featureType": "poi", "elementType": "labels.text.fill", "stylers": [{"color": "#6f9ba5"}]},
                    {"featureType": "poi", "elementType": "labels.text.stroke", "stylers": [{"color": "#1d2c4d"}]},
                    //park areas color is next line
                    {"featureType": "poi.park", "stylers": [{"color": "#b8ddc3"}, {"visibility": "simplified"}]},
                    {"featureType": "poi.park", "elementType": "labels", "stylers": [{"visibility": "off"}]},
                    {"featureType": "poi.park", "elementType": "labels.icon", "stylers": [{"visibility": "off"}]},
                    //road color is the next line
                    {"featureType": "road", "elementType": "geometry", "stylers": [{"color": "#f2f2f2"}]},
                    {"featureType": "road", "elementType": "labels", "stylers": [{"visibility": "off"}]},
                    {"featureType": "road", "elementType": "labels.text.fill", "stylers": [{"color": "#4e6d70"}]},
                    {"featureType": "road", "elementType": "labels.text.stroke", "stylers": [{"color": "#f2f2f2"}]},
                    {"featureType": "road.arterial", "stylers": [{"visibility": "simplified"}]},
                    {
                        "featureType": "road.arterial",
                        "elementType": "geometry",
                        "stylers": [{"visibility": "simplified"}]
                    },
                    {"featureType": "road.arterial", "elementType": "labels", "stylers": [{"visibility": "off"}]},
                    {"featureType": "road.highway", "stylers": [{"visibility": "simplified"}]},
                    {"featureType": "road.highway", "elementType": "labels", "stylers": [{"visibility": "off"}]},
                    {
                        "featureType": "road.highway",
                        "elementType": "labels.text.fill",
                        "stylers": [{"color": "#4e6d70"}]
                    },
                    {
                        "featureType": "road.highway",
                        "elementType": "labels.text.stroke",
                        "stylers": [{"color": "#f2f2f2"}]
                    },
                    //transit lines and land area polygons are the next line
                    {"featureType": "transit", "stylers": [{"color": "#b2b2b2"}]},
                    {"featureType": "transit", "elementType": "labels", "stylers": [{"visibility": "off"}]},
                    {
                        "featureType": "transit",
                        "elementType": "labels.text.fill",
                        "stylers": [{"color": "#98d2b2"}]
                    },
                    {
                        "featureType": "transit",
                        "elementType": "labels.text.stroke",
                        "stylers": [{"color": "#F2F2F2"}]
                    },
                    {"featureType": "water", "stylers": [{"color": "#b6d5e3"}]},
                    {"featureType": "water", "elementType": "labels.text.fill", "stylers": [{"color": "#4e6d70"}]}]
            });
            var drawingManager = new google.maps.drawing.DrawingManager({
                drawingMode: google.maps.drawing.OverlayType.MARKER,
                drawingControl: true,
                drawingControlOptions: {
                    position: google.maps.ControlPosition.TOP_CENTER,
                    drawingModes: ['marker', 'circle', 'polygon', 'polyline', 'rectangle']
                },
                markerOptions: {icon: 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png'},
                circleOptions: {
                    fillColor: '#ffff00',
                    fillOpacity: 1,
                    strokeWeight: 5,
                    clickable: false,
                    editable: true,
                    zIndex: 1
                }
            });
            drawingManager.setMap(map);
            google.maps.event.addListener(drawingManager, 'overlaycomplete', function (event) {
                if (event.type == 'circle') {
                    var radius = event.overlay.getRadius();
                }
                if (event.type == 'polygon') {
                    // var polygon = event.overlay;
                    var polygon = event.overlay.getPath().getArray();
                    for(var i = 0; i < polygon.length; i++) {
                        console.log(polygon[i].lat() + ", " + polygon[i].lng());
                    }
                    // console.log(polygon);
                }
            });
        }
    script(src="https://d3js.org/d3.v5.min.js")
    script.
        var dataset = [];
        function getPlace(id) {
            // "https://www.inaturalist.org/places.json?taxon=Calochortus+tiburonensis&place_type=open+space"
            // let url = "https://www.inaturalist.org/projects.json?id=" + id;
            let url = "https://www.inaturalist.org/observations.json?username=" + id;
            httpGetAsync(url, loadData);
        }
        function httpGetAsync(theUrl, callback){
            var xmlHttp = new XMLHttpRequest();
            xmlHttp.onreadystatechange = function () {
                if (xmlHttp.readyState == 4 && xmlHttp.status == 200)
                    callback(xmlHttp.responseText);
            }
            xmlHttp.open("GET", theUrl, true); // true for asynchronous
            xmlHttp.send();
        }
        function search(element) {
            if (event.key === 'Enter') {
                getPlace(element.value);
            }
        }
        //taxon, location, date
        //instead of observations, we get surveys
        function loadData(data) {
            data = JSON.parse(data);
            console.log(data);
            let x = 0;
            for(i = 0; i < data.length; i++) {
                if(data[i].taxon != null) {
                    data[i].x = x;
                    x += 100;
                    dataset.push(data[i])
                }
            }
            displayData();
        }
        function displayData() {
            var barPadding = 5;
            var barWidth = (svgWidth / dataset.length);
            var barHeight = 20;
            var textHeight = 20;

            // dataset = [80, 100, 56, 120, 180, 30, 40, 120, 160];

            var barChart = svg.selectAll("rect")
                .data(dataset)
                .enter()
                .append("rect")
                .attr("y", function (d) {
                    return svgHeight - barHeight - textHeight;
                })
                .attr("height", function (d) {
                    return barHeight;
                })
                .attr("width", barWidth - barPadding)
                .attr("transform", function (d, i) {
                    var translate = [barWidth * i, 0];
                    return "translate(" + translate + ")";
                })
                ;

            svg.selectAll("text")
                .data(dataset)
                .enter()
                .append("text")
                .attr("x", function (d) {
                    return d.x;
                })
                .attr("y", function (d) {
                    return svgHeight;
                })
                .text(function (d) {
                    console.log(d);
                    return d.taxon.name;
                })

            console.log(dataset);
        }

body
    input(type="text" id="searchBox" style="width: 150px; align-self:center; margin-right:5px; padding: 5px 5px 5px 10px; font-weight: 400; border-style:solid; border-radius: 30px; outline: 0; border-color:#eaeaea; background:#eaeaea;" onkeydown="search(this)")
    svg
    div#map(style="height:400px; width:600px;")

footer
    script.
        var svgWidth = 500;
        var svgHeight = 300;
        var svg = d3.select('svg')
            .attr("width", svgWidth)
            .attr("height", svgHeight)
            .attr("class", "bar-chart");

        var manipulatedData = {};

        (function displayPrototypeData() {
            for(specie in data.species) {

            }
            for(site in data.sites){
                console.log(data.sites[site].name);
                for(habitat in data.sites[site].habitats) {
                    for(point in data.sites[site].habitats[habitat])
                        console.log(point);
                        console.log(data.sites[site].habitats[habitat][point]);
                    // data.sites[site].habitats[habitat]
                }
            }
        })()