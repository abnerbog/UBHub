doctype html
include mixins
html
    head
        style.
            .bar-chart {
                border: solid;
            }
            .newSite {
                display: flex;
                padding: 10px;
                border: solid;
            }
        link(href="https://unpkg.com/tabulator-tables@4.2.3/dist/css/tabulator.min.css" rel="stylesheet")
        script(type="text/javascript" src="https://unpkg.com/tabulator-tables@4.2.3/dist/js/tabulator.min.js")
        link(rel='stylesheet', href='/stylesheets/style.css')
        script(src="https://d3js.org/d3.v5.min.js")
        script(async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAEKjvE48-VV37P2pGBWFphvlrx8BXGDCs&libraries=drawing,geometry")
        script.
            var sites = [];
            var polygon;
            var table;
            var columns;
            window.onload = function (ev) {
                initMapOnPage();

                var tableData = [
                    {id: 1, name: "Billy Bob", age: "12", gender: "male", height: 1, col: "red", dob: "", cheese: 1},
                    {
                        id: 2,
                        name: "Mary May",
                        age: "1",
                        gender: "female",
                        height: 2,
                        col: "blue",
                        dob: "14/05/1982",
                        cheese: true
                    },
                ]

                columns = [
                    {title: "Species", field: "species", editor: "input"},
                    {title: "Taxa", field: "taxa", editor: "select", editorParams: {"Plant": "Plant", "Bird": "Bird", "Invert Pollinator": "Invert Pollinator"}
                    }];

                table = new Tabulator("#example-table", {
                    data: tableData,           //load row data from array
                    layout: "fitColumns",      //fit columns to width of table
                    responsiveLayout: "hide",  //hide columns that dont fit on the table
                    tooltips: true,            //show tool tips on cells
                    addRowPos: "top",          //when adding a new row, add it to the top of the table
                    history: true,             //allow undo and redo actions on the table
                    pagination: "local",       //paginate the data
                    paginationSize: 7,         //allow 7 rows per page of data
                    movableColumns: true,      //allow column order to be changed
                    resizableRows: true,       //allow row order to be changed
                    initialSort: [             //set the initial sort order of the data
                        {column: "name", dir: "asc"},
                    ],
                    columns: columns});
            };

            function initMapOnPage() {
                center = {lat: 20, lng: 15};
                map = new google.maps.Map(document.getElementById('map'), {
                    zoom: 2, streetViewControl: false,
                    center: center,
                    styles: [{"elementType": "geometry", "stylers": [{"color": "#b6d5e3"}]},
                        {"elementType": "labels.text.fill", "stylers": [{"color": "#6da4c7"}]},
                        {"elementType": "labels.text.stroke", "stylers": [{"color": "#b6d5e3"}]},
                        {"featureType": "administrative", "stylers": [{"visibility": "simplified"}]},
                        {"featureType": "administrative", "elementType": "geometry", "stylers": [{"color": "#f2f2f2"}]},
                        //country borders color is next line
                        {
                            "featureType": "administrative",
                            "elementType": "geometry.stroke",
                            "stylers": [{"color": "#ffffff"}, {"visibility": "on"}]
                        },
                        //main labels color is the next line
                        {
                            "featureType": "administrative",
                            "elementType": "labels.text",
                            "stylers": [{"color": "#939393"}]
                        },
                        //urban land color is next line
                        {"featureType": "landscape", "stylers": [{"color": "#cccccc"}]},
                        {
                            "featureType": "landscape.man_made",
                            "elementType": "geometry.stroke",
                            "stylers": [{"color": "#334e87"}]
                        },
                        //main land color is the next line
                        {"featureType": "landscape.natural", "stylers": [{"color": "#d3e9d5"}]},
                        {"featureType": "poi", "stylers": [{"visibility": "off"}]},
                        {"featureType": "poi", "elementType": "geometry", "stylers": [{"color": "#283d6a"}]},
                        {"featureType": "poi", "elementType": "labels.text.fill", "stylers": [{"color": "#6f9ba5"}]},
                        {"featureType": "poi", "elementType": "labels.text.stroke", "stylers": [{"color": "#1d2c4d"}]},
                        //park areas color is next line
                        {"featureType": "poi.park", "stylers": [{"color": "#b8ddc3"}, {"visibility": "simplified"}]},
                        {"featureType": "poi.park", "elementType": "labels", "stylers": [{"visibility": "off"}]},
                        {"featureType": "poi.park", "elementType": "labels.icon", "stylers": [{"visibility": "off"}]},
                        //road color is the next line
                        {"featureType": "road", "elementType": "geometry", "stylers": [{"color": "#f2f2f2"}]},
                        {"featureType": "road", "elementType": "labels", "stylers": [{"visibility": "off"}]},
                        {"featureType": "road", "elementType": "labels.text.fill", "stylers": [{"color": "#4e6d70"}]},
                        {"featureType": "road", "elementType": "labels.text.stroke", "stylers": [{"color": "#f2f2f2"}]},
                        {"featureType": "road.arterial", "stylers": [{"visibility": "simplified"}]},
                        {
                            "featureType": "road.arterial",
                            "elementType": "geometry",
                            "stylers": [{"visibility": "simplified"}]
                        },
                        {"featureType": "road.arterial", "elementType": "labels", "stylers": [{"visibility": "off"}]},
                        {"featureType": "road.highway", "stylers": [{"visibility": "simplified"}]},
                        {"featureType": "road.highway", "elementType": "labels", "stylers": [{"visibility": "off"}]},
                        {
                            "featureType": "road.highway",
                            "elementType": "labels.text.fill",
                            "stylers": [{"color": "#4e6d70"}]
                        },
                        {
                            "featureType": "road.highway",
                            "elementType": "labels.text.stroke",
                            "stylers": [{"color": "#f2f2f2"}]
                        },
                        //transit lines and land area polygons are the next line
                        {"featureType": "transit", "stylers": [{"color": "#b2b2b2"}]},
                        {"featureType": "transit", "elementType": "labels", "stylers": [{"visibility": "off"}]},
                        {
                            "featureType": "transit",
                            "elementType": "labels.text.fill",
                            "stylers": [{"color": "#98d2b2"}]
                        },
                        {
                            "featureType": "transit",
                            "elementType": "labels.text.stroke",
                            "stylers": [{"color": "#F2F2F2"}]
                        },
                        {"featureType": "water", "stylers": [{"color": "#b6d5e3"}]},
                        {"featureType": "water", "elementType": "labels.text.fill", "stylers": [{"color": "#4e6d70"}]}]
                });
                var drawingManager = new google.maps.drawing.DrawingManager({
                    drawingMode: google.maps.drawing.OverlayType.POLYGON,
                    drawingControl: true,
                    drawingControlOptions: {
                        position: google.maps.ControlPosition.TOP_CENTER,
                        drawingModes: ['polygon']
                    },
                    markerOptions: {icon: 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png'},
                    circleOptions: {
                        fillColor: '#ffff00',
                        fillOpacity: 1,
                        strokeWeight: 5,
                        clickable: false,
                        editable: true,
                        zIndex: 1
                    }
                });
                drawingManager.setMap(map);
                google.maps.event.addListener(drawingManager, 'overlaycomplete', function (event) {
                    if (event.type == 'circle') {
                        var radius = event.overlay.getRadius();
                    }
                    if (event.type == 'polygon') {
                        polygon = event.overlay.getPath().getArray();
                        var site = {
                            taxa: [],
                            coordinates: []
                        };
                        for (var i = 0; i < polygon.length; i++) {
                            console.log(polygon[i].lat() + ", " + polygon[i].lng());
                            site.coordinates.push({lat: polygon[i].lat(), lng: polygon[i].lng()})
                        }
                        addSiteToUi(site);
                        sites.push(site)
                        console.log(sites);
                    }
                });
            }
            function addSiteToUi(site) {
                let siteElement = document.createElement("DIV");
                siteElement.className = "newSite";
                let siteSvg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
                siteSvg.setAttribute("height", "180px");
                siteSvg.setAttribute("width", "360px");
                let sitePolygon = document.createElementNS('http://www.w3.org/2000/svg', 'polygon');

                let points = "";
                for(let i = 0; i < site.coordinates.length; i++) {
                    points += (site.coordinates[i].lng + 180) + "," + (site.coordinates[i].lat * -1 + 90);
                    if(i < site.coordinates.length - 1) {
                        points += ",";
                    }
                }
                sitePolygon.setAttribute('points', points);

                siteSvg.appendChild(sitePolygon);
                siteElement.appendChild(siteSvg);

                let siteData = document.createElement("DIV");
                siteData.innerText = "Site name\nHabitatSelect";

                siteElement.appendChild(siteData);

                document.getElementById("chart").appendChild(siteElement);
            }

body
    +header(true)

    div(style="padding-top:40px;")

    if queryId
        if queryId == 1
            div(style="margin:auto; min-width:800px; display:flex; flex-direction:column; align-items:center;")
                div Project Name
                input
                div Taxa
                // (min 5, first three: Plant, Bird, Invertebrate pollinator)
                div Plant
                div Bird
                div Invertebrate pollinator
                input
                input
                button(onclick="addTaxa()") add taxa
                div Habitats
                button(onclick="addHabitat()") add habitat
                div(id="example-table")
                div#map(style="height:400px; width:800px;")
                div(id="chart")
                //div(style="display:flex;")
                //    div iNaturalist url
                //    input(id="input" value="dragonfly-creek-riparian-ubif")
                //button(onclick="processRequest()") import iNaturalist data

                svg
                div Save


    +footer()

footer
    script.
        function addHabitat() {
            let newHabitat = {title: "otherHabitat", field: "otherHabitat", width:90,  align:"center", formatter:"tickCross", sorter:"boolean", editor:true}
            columns.push(newHabitat);
            table.setColumns(columns);
        }

        function getRandomInt(min, max) {
            min = Math.ceil(min);
            max = Math.floor(max);
            return Math.floor(Math.random() * (max - min + 1)) + min;
        }

        var markers = [];
        var returnedJson;

        processRequest = function() {
            getINaturalistData().then(function (value) { placeMarkers(); });
        }

        getINaturalistData = function() {
            return new Promise(function(resolve) {
                iNaturalistProjectId = document.getElementById("input").value;
                document.getElementById("input").value = "";

                var xhr = new XMLHttpRequest();

                xhr.onreadystatechange = function () {
                    if (xhr.readyState == 3) {

                    } else if (xhr.readyState == 4 && xhr.status == 200) {
                        returnedJson = JSON.parse(xhr.responseText);
                        console.log(returnedJson);
                        resolve();
                    }
                };

                xhr.open("GET", "https://inaturalist.org/observations/project/" + iNaturalistProjectId + ".json", true);
                xhr.setRequestHeader("Content-Type", "application/json; charset=utf-8");
                xhr.send();
            });
        }

        placeMarkers = function() {
            greyImage = {
                url: '/images/marker_0_grey_39x59.png',
                scaledSize: new google.maps.Size(20, 30)
            };
            var observations = returnedJson;
            for (observation in observations) {
                var position = {
                    lat: parseFloat(observations[observation].latitude),
                    lng: parseFloat(observations[observation].longitude)
                };
                var marker = new google.maps.Marker({
                    position: position,
                    map: map,
                    icon: greyImage
                });
                marker.taxon = observations[observation].iconic_taxon_name;
                marker.species = observations[observation].species_guess;
                marker.presence = Math.random() >= 0.5;
                markers.push(marker);
            }
            updateMap();
        }

        updateMap = function () {
            var minLat, maxLat, minLng, maxLng;
            for(i = 0; i < markers.length; i++) {
                if(minLat == null || markers[i].getPosition().lat() < minLat)
                    minLat = markers[i].getPosition().lat();
                if (maxLat == null || markers[i].getPosition().lat() > maxLat)
                    maxLat = markers[i].getPosition().lat();
                if (minLng == null || markers[i].getPosition().lng() < minLng)
                    minLng = markers[i].getPosition().lng();
                if (maxLng == null || markers[i].getPosition().lng() > maxLng)
                    maxLng = markers[i].getPosition().lng();
            }

            var polygons = [{polygon: {}, markers: []}, {polygon: {}, markers: []}, {polygon: {}, markers: []}, {polygon: {}, markers: []}];

            for(i = 0; i < 4; i++) {

                switch (i) {
                    case 0:
                        westBound = minLng;
                        eastBound = minLng + (maxLng - minLng) / 4;
                        break;
                    case 1:
                        westBound = minLng + (maxLng - minLng) / 4;
                        eastBound = minLng + ((maxLng - minLng) / 4) * 2;
                        break;
                    case 2:
                        westBound = minLng + ((maxLng - minLng) / 4) * 2;
                        eastBound = minLng + ((maxLng - minLng) / 4) * 3;
                        break;
                    case 3:
                        westBound = minLng + ((maxLng - minLng) / 4) * 3;
                        eastBound = maxLng;
                        break;
                }

                polygons[i].polygon = new google.maps.Rectangle({
                    strokeColor: '#000000',
                    strokeOpacity: 1.0,
                    strokeWeight: 1,
                    fillColor: '#FFFFFF',
                    fillOpacity: 0.0,
                    map: map,
                    bounds: {
                        north: maxLat,
                        south: minLat,
                        east: eastBound,
                        west: westBound
                    }
                });
            }

            for(i = 0; i < markers.length; i++) {
                for(k = 0; k < polygons.length; k++) {
                    if(polygons[k].polygon.getBounds().contains(markers[i].getPosition())) {
                        polygons[k].markers.push(markers[i]);
                        break;
                    }
                }
            }

            // for(polygon in polygons) {
            //     for(marker in polygons[polygon].markers) {
            //         console.log(polygons[polygon].markers[marker].species);
            //         console.log(polygons[polygon].markers[marker].taxon);
            //         console.log(polygons[polygon].markers[marker].presence);
            //     }
            // }

            chart(polygons);

            var rectangle = new google.maps.Rectangle({
                strokeColor: '#FFFFFF',
                strokeOpacity: 0.0,
                strokeWeight: 2,
                fillColor: '#FF0000',
                fillOpacity: 0.35,
                map: map,
                bounds: {
                    north: maxLat,
                    south: minLat,
                    east: maxLng,
                    west: minLng
                }
            });

            map.fitBounds(rectangle.getBounds());

            // map.setCenter({lat: ((maxLat - minLat) / 2 + minLat), lng: ((maxLng - minLng) / 2 + minLng)});
            // map.setZoom(17);
        }

        chart = function(polygons) {
            var svgWidth = 500;
            var svgHeight = 300;
            var svg = d3.select('svg')
                .attr("width", svgWidth)
                .attr("height", svgHeight)
                .attr("class", "bar-chart");

            svg.selectAll("rect")
                .data(polygons)
                .enter()
                .append("rect")
                .attr("height", function (d) {
                    // console.log(d);
                    var presence = 0;
                    for(marker in d.markers) {
                        if(d.markers[marker].presence)
                            presence += 1;
                    }
                    presence = svgHeight * (presence / d.markers.length);
                    d.presence = presence;
                    return presence;
                })
                .style("stroke", "white")
                .style("fill", "grey")
                .style("stroke-width", 5)
                .attr("y", function (d) {return svgHeight - d.presence;})
                .attr("width", svgWidth / polygons.length)
                .attr("transform", function (d, i) {
                    var translate = [i * svgWidth / polygons.length, 0];
                    return "translate(" + translate + ")";
                });
        }
