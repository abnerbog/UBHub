doctype html
include mixins
html
    head
        link(rel='stylesheet', href='/stylesheets/style.css')
        style.
            .booleanChildren {
                display: block;
                font-weight:bold; color: darkblue; border: none; background-color: lightblue; border-radius: 10px; width: fit-content; padding: 10px;
            }

            button {
                font-weight:bold; color: darkblue; border: none; background-color: lightblue; border-radius: 10px; width: fit-content; padding: 10px;
            }

        script.
            class BooleanIndicator {
                static create() {
                    let booleanDetails = document.createElement('div');
                    booleanDetails.textContent = "boolean details";
                    booleanDetails.className = "boolean";

                    let firstBool = document.createElement('input');
                    firstBool.className = "booleanChildren";
                    booleanDetails.append(firstBool);

                    let secondBool = document.createElement('input');
                    secondBool.className = "booleanChildren";
                    booleanDetails.append(secondBool);

                    return booleanDetails;
                }
            }

            class FloatIndicator {
                static create() {
                    let floatIndicator = document.createElement('div');
                    floatIndicator.textContent = "float details";
                    floatIndicator.className = "floatClassName";

                    return floatIndicator;
                }
            }

            // TODO - add remaining category classes

            let targetCategory;


body
    div(style="display:none; position:fixed; height:100%; width:100%; background-color:rgba(0,0,0,0.4); z-index:4;" id="createNewCategoryModal" onclick="hideModal('createNewCategoryModal')")
        div(style="height:200px; width:400px; background-color:white; margin:auto; border-radius:10px;" onclick="stopPropagation(event);")
            input(id="createNewCategoryInput" class="customProgramItem")
            button(onclick="createCategory(); hideModal('createNewCategoryModal');") add category

    div(style="display:none; position:fixed; height:100%; width:100%; background-color:rgba(0,0,0,0.4); z-index:4;" id="createNewIndicatorModal" onclick="hideModal('createNewIndicatorModal')")
        div(style="height:200px; width:400px; background-color:white; margin:auto; border-radius:10px;" onclick="stopPropagation(event);")
            div(class="flex")
                div
                    input(id="createNewIndicatorInput" class="customProgramItem")
                    div(class="flex column") Indicator type
                        div(class="flex")
                            input(type="radio" name="type" onchange="indicatorChange('boolean')")
                            label boolean
                        div(class="flex")
                            input(type="radio" name="type" onchange="indicatorChange('float')")
                            label float
                        div(class="flex")
                            input(type="radio" name="type" onchange="indicatorChange('checkbox')")
                            label checkbox
                        div(class="flex")
                            input(type="radio" name="type" onchange="indicatorChange('radio')")
                            label radio button
                        div(class="flex")
                            input(type="radio" name="type" onchange="indicatorChange('number')")
                            label number
                    button(onclick="createIndicator(getIndicatorValue()); hideModal('createNewIndicatorModal');") add indicator
                div(id="indicatorDetailsPanel")

    div(style="display:none; position:fixed; height:100%; width:100%; background-color:rgba(0,0,0,0.4); z-index:4;" id="colorPickerModal" onclick="hideModal('colorPickerModal')")
        div(style="height:200px; width:400px; background-color:#B7B7B7; margin:auto; border-radius:10px;" onclick="stopPropagation(event);")
            div(style="display:flex;")
                div(class="color" style="background:#E94A35;" onclick="setTargetCategoryColor(this);")
                div(class="color" style="background:#F59D00;" onclick="setTargetCategoryColor(this);")
                div(class="color" style="background:#F5E100;" onclick="setTargetCategoryColor(this);")
                div(class="color" style="background:#009755;" onclick="setTargetCategoryColor(this);")
                div(class="color" style="background:#0073BF;" onclick="setTargetCategoryColor(this);")
                div(class="color" style="background:#083D7A;" onclick="setTargetCategoryColor(this);")
                div(class="color" style="background:#6EC4FD;" onclick="setTargetCategoryColor(this);")
                div(class="color" style="background:#7935E9;" onclick="setTargetCategoryColor(this);")
                div(class="color" style="background:#000000;" onclick="setTargetCategoryColor(this);")
                div(class="color" style="background:#B58989;" onclick="setTargetCategoryColor(this);")

    div(style="display:none; position:fixed; height:100%; width:100%; background-color:rgba(0,0,0,0.4); z-index:4;" id="noCategoryErrorPopUp" onclick="hideModal('noCategoryErrorPopUp')")
        div(style="height:200px; width:400px; background-color:white; margin:auto; border-radius:10px;" onclick="stopPropagation(event);")
            | Please create a category first!

    +header(true)

    script.

        function indicatorChange(type) {
            let indicatorDetailsPanel = document.getElementById("indicatorDetailsPanel");
            while(indicatorDetailsPanel.childElementCount > 0) {
                indicatorDetailsPanel.firstChild.remove();
            }

            switch (type) {
                case 'boolean':
                    let booleanDetails = BooleanIndicator.create();
                    indicatorDetailsPanel.append(booleanDetails);
                    break;
                case 'float':
                    let floatDetails = FloatIndicator.create();
                    indicatorDetailsPanel.append(floatDetails);
                    break;
                case 'checkbox':
                    break;
                case 'radio':
                    break;
                case 'number':
                    break;
                default:
                    break;
            }
        }

         function getIndicatorValue() {
            let indicatorValues = [];
            let indicatorPanel = document.getElementById("indicatorDetailsPanel");
            let indicatorType = indicatorPanel.children[0].getAttribute("class");
            switch (indicatorType) {
                case 'boolean':
                    let booleanChildren = document.getElementsByClassName("booleanChildren");
                    for(var i = 0; i < booleanChildren.length; i += 1) {
                        let indicatorValue = {type: indicatorType, name: booleanChildren[i].value, required:booleanChildren[i].getAttribute('required')}
                        indicatorValues.push(indicatorValue);
                    }
                    break;
                case 'float':
                    let floatChildren = document.getElementsByClassName("floatChildren");
                    for (var i = 0; i < floatChildren.length; i += 1) {
                        let indicatorValue = {
                            type: indicatorType,
                            name: floatChildren[i].value,
                            required: floatChildren[i].getAttribute('required')
                        }
                        indicatorValues.push(indicatorValue);
                    }
                    break;
                default:
                    break;
            }
            return indicatorValues;
        }

        let newProgram = {
            categories: []
        };

        function allowDrop(ev) {
            ev.preventDefault();
        }

        function drag(ev) {
            ev.dataTransfer.setData("text", ev.target.textContent);
            ev.dataTransfer.setData("id", ev.target.id);
        }

        function drop(ev) {
            ev.preventDefault();
            let data = ev.dataTransfer.getData("text");
            let id = ev.dataTransfer.getData("id");
            let i = 0;
            let element = ev.target;
            while (!element.getAttribute("ondrop") && i < 100) {
                element = element.parentElement;
                i++;
            }
            element.appendChild(document.getElementById(id));
            for (let i = 0; i < newProgram.categories.length; i++) {
                for(let j = 0; j < newProgram.categories[i].indicators.length; j++) {
                    if(newProgram.categories[i].indicators[j].id == id){ //yes we are relying on type coercion here
                        newProgram.categories[i].indicators.splice(j, 1);
                        break;
                    }
                }
            }

            for (let i = 0; i < newProgram.categories.length; i++) {
                if(element.getAttribute("categoryId") == newProgram.categories[i].id){ //yes we are relying on type coercion here element.getAttribute("categoryId") is a string, newProgram.categories[i].id is a number
                    indicator = {
                        id: id,
                        name: data
                    };
                    newProgram.categories[i].indicators.push(indicator)
                    break;
                }
            }
        }

        function hideModal(id) {
            document.getElementById(id).style.display = "none";
        }

        function stopPropagation(e) {
            e.stopPropagation();
        }

        function createNewCategory() {
            document.getElementById('createNewCategoryModal').style.display = "flex";
            document.getElementById('createNewCategoryInput').focus();
        }

        function createCategory() {
            let newCategoryWrapper = document.createElement("div");
            newCategoryWrapper.setAttribute("ondrop", "drop(event)");
            newCategoryWrapper.setAttribute("ondragover", "allowDrop(event)");

            let newCategory = document.createElement("div");
            newCategory.setAttribute("style", "display:flex; align-items:center;");

            let newCategoryInput = document.createElement("input");
            newCategoryInput.setAttribute('class', 'customProgramItem');
            newCategoryInput.value = document.getElementById('createNewCategoryInput').value;

            let newCategoryColor = document.createElement("div");
            newCategoryColor.setAttribute("style", "background-color:red; border-radius:100%; width:30px; height:30px;");
            newCategoryColor.setAttribute("onclick", "openColorPicker(this);");

            newCategory.appendChild(newCategoryInput);
            newCategory.appendChild(newCategoryColor);

            let newCategoryObject = {
                name: newCategoryInput.value,
                id: Date.now(),
                indicators: []
            };


            let removeCategoryButton = document.createElement("div");
            removeCategoryButton.setAttribute("style", "background-color:black; border-radius:100%; width:30px; height:30px;");
            removeCategoryButton.setAttribute("onclick", "removeCategory(" + newCategoryObject.id + ");");
            newCategory.appendChild(removeCategoryButton);


            newCategoryWrapper.setAttribute("categoryName", newCategoryObject.name);
            newCategoryWrapper.setAttribute("categoryId", newCategoryObject.id);
            newCategoryWrapper.setAttribute("id", newCategoryObject.id);

            newProgram.categories.push(newCategoryObject);
            newCategoryInput.onblur = function (event) {
                newCategoryWrapper.setAttribute("categoryName", newCategoryInput.value);
                for(let i = 0; i < newProgram.categories.length; i++){
                    if(newProgram.categories[i].id === newCategoryWrapper.getAttribute("categoryId")){
                        newProgram.categories[i].name = newCategoryInput.value;
                        break;
                    }
                }
            }

            newCategoryWrapper.appendChild(newCategory);

            document.getElementById("categoriesContainer").appendChild(newCategoryWrapper);
            document.getElementById('createNewCategoryInput').value = "";
        }

        function openColorPicker(target) {
            targetCategory = target;
            document.getElementById('colorPickerModal').style.display = "flex";
        }

        function setTargetCategoryColor(colorPickerElement) {
            targetCategory.style.backgroundColor = colorPickerElement.style.backgroundColor;
        }

        function createNewIndicator() {
            document.getElementById('createNewIndicatorModal').style.display = "flex";
            document.getElementById('createNewIndicatorInput').focus();
            indicatorChange('boolean');
        }

        function createIndicator(indicatorValues) {
            let newIndicatorSendToServer = {
                name: document.getElementById('createNewIndicatorInput').value
            };

            httpPost("/createCustomIndicator", createIndicatorCallback(indicatorValues), newIndicatorSendToServer);
        }

        function createIndicatorCallback(indicatorValues) {
            return function (responseFromServer) {
                const indicatorValuesPackaged = {responseFromServer, indicatorValues};
                httpPost("/createCustomIndicatorValues", console.log, indicatorValuesPackaged);
                responseFromServer = JSON.parse(responseFromServer);
                let newIndicator = document.createElement("div");
                newIndicator.textContent = responseFromServer.indicatorName;
                newIndicator.setAttribute("draggable", "true");
                newIndicator.setAttribute("ondragstart", "drag(event)");
                newIndicator.setAttribute("class", "customProgramItem");
                newIndicator.id = responseFromServer.id;
                document.getElementById("indicatorsContainer").appendChild(newIndicator);
                document.getElementById('createNewIndicatorInput').value = "";
            }
        }

        function createProgram() {
            if (newProgram.categories.length < 1) {
                noCategoryErrorPopUp(); // makes new div visible
            } else {
                httpPost("/createCustomProgram", console.log, newProgram);
            }
        }

        function removeCategory(categoryId) {
            for(let i = 0; i < newProgram.categories.length; i++) {
                if (newProgram.categories[i].id === categoryId) {
                    newProgram.categories.splice(i, 1);
                    document.getElementById(categoryId).remove();
                }
             }
        };

        function noCategoryErrorPopUp() {
            document.getElementById('noCategoryErrorPopUp').style.display = "flex";
            document.getElementById('noCategoryErrorField').focus();
        };

    div(style="padding:40px;")
        - let indicatorsJSON = JSON.parse(indicators);
        div(style="display:flex;")
            div(style="flex-grow:1;")
                div Indicators
                button(onclick="createNewIndicator()") Create new indicator
                div(style="height:100%; width:100%; border:solid; border-width:1px; border-color:grey;" ondrop="drop(event)" ondragover="allowDrop(event)" id="indicatorsContainer")
                    - for (let i = 0; i < indicatorsJSON.length; i++) {
                        +indicator(indicatorsJSON[i].indicatorName, indicatorsJSON[i].description, indicatorsJSON[i].descriptionOfCalculation, indicatorsJSON[i].id)
                    - }
            div(style="flex-grow:1;")
                div Categories
                button(onclick="createNewCategory()") Create new category
                div(style="height:100%; width:100%; border:solid; border-width:1px; border-color:grey;" id="categoriesContainer")
        button(onclick="createProgram()") Create Program

    +footer()
